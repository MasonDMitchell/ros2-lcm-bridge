cmake_minimum_required(VERSION 3.8)
project(ros2_lcm_bridge)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rosidl_default_generators REQUIRED)

#Remove python source files from lcm_messages before building new LCM messages
execute_process (
	WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/lcm_messages"
	COMMAND bash -c 
	"rm *.py"
	)

#Build new LCM message python source files
execute_process (
	WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/lcm_messages"
	COMMAND bash -c 
	"lcm-gen -p *.lcm"
	)

#Remove autogenerated ROS messages before regeneration
execute_process (
	WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/msg"
	COMMAND bash -c 
	"rm *.msg"
	)

#Add python files to build folder
#TODO This is not a recommended sourcing technique.
#... we're doing it anyway.
file(GLOB_RECURSE pyfiles CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR} "include/*.py")

foreach(file ${pyfiles})
	cmake_path(GET file FILENAME barename)
	configure_file(${file} ${barename} COPYONLY)
endforeach()

#Add lcm files to build folder
#TODO This is not a recommended sourcing technique.
#"We ballin'" -Tim Greco
file(GLOB_RECURSE lcmfiles CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR} "lcm_messages/*.lcm")

foreach(file ${lcmfiles})
	cmake_path(GET file FILENAME barename)
	configure_file(${file} ${barename} COPYONLY)
endforeach()

#Run LCM_to_ROS message builder
execute_process(COMMAND ${Python3_EXECUTABLE} "message_builder.py"
		RESULT_VARIABLE python_result
		OUTPUT_VARIABLE ros_msgs)

message(STATUS "List of generated ROS files:\n${ros_msgs}")

#Change python script print output to list
separate_arguments(ros_msgs)

#Copying ROS messages from binary directory to source after python script generation
#"It works, thank you for coming to my TED Talk." -J. Diego
foreach(file ${ros_msgs})
	cmake_path(GET file FILENAME barename)
	configure_file("${CMAKE_CURRENT_BINARY_DIR}/${barename}" "${CMAKE_CURRENT_SOURCE_DIR}/${file}" COPYONLY)
endforeach()

#Include automatically generated ROS messages
rosidl_generate_interfaces(${PROJECT_NAME}
	${ros_msgs}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
